import logging
import os
from aiogram import Router, types
from aiogram.filters import Command

from tariff_store import load_tariffs_cfg, upsert_tariff, save_tariffs_cfg

# ===== –ß–∏—Ç–∞—î–º–æ ADMIN_IDS –∑ .env =====
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]

# ===== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è =====
router = Router()
logger = logging.getLogger(__name__)


# ===== –ö–æ–º–∞–Ω–¥–∞ /set_tariff =====
@router.message(Command("set_tariff"))
async def set_tariff_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    try:
        parts = message.text.split()
        if len(parts) != 4:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /set_tariff <–Ω–∞–∑–≤–∞> <–±–∞–∑–∞> <–∑–∞_–∫–º>")
            return

        _, name, base, per_km = parts
        base, per_km = float(base), float(per_km)

        cfg = load_tariffs_cfg()
        upsert_tariff(cfg, name, base, per_km)
        save_tariffs_cfg(cfg)

        await message.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ {name} –æ–Ω–æ–≤–ª–µ–Ω–æ: –±–∞–∑–∞={base}, –∫–º={per_km}")
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ —É set_tariff_cmd")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


# ===== –ö–æ–º–∞–Ω–¥–∞ /show_tariffs =====
@router.message(Command("show_tariffs"))
async def show_tariffs_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    cfg = load_tariffs_cfg()
    txt = "üìä –ü–æ—Ç–æ—á–Ω—ñ —Ç–∞—Ä–∏—Ñ–∏:\n"
    for name, vals in cfg.get("tariffs", {}).items():
        txt += f"{name}: –±–∞–∑–æ–≤–∞ {vals.get('base', 0)} –≥—Ä–Ω, –∑–∞ –∫–º {vals.get('per_km', 0)} –≥—Ä–Ω\n"

    await message.answer(txt)


# ===== –ö–æ–º–∞–Ω–¥–∞ /save_tariffs =====
@router.message(Command("save_tariffs"))
async def save_tariffs_cmd(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    cfg = load_tariffs_cfg()
    save_tariffs_cfg(cfg)
    await message.answer("üíæ –¢–∞—Ä–∏—Ñ–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª.")
